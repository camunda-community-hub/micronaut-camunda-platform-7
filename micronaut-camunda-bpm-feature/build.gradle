plugins {
    id("org.jetbrains.kotlin.jvm")
    id("org.jetbrains.kotlin.kapt")
    id("org.jetbrains.kotlin.plugin.allopen")
    id("io.micronaut.library")
    id("java-library")
    id("maven-publish")
    id("signing")
}

group = "info.novatec"

micronaut {
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("micronaut.camunda.bpm.feature.*")
    }
}

dependencies {
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("com.fasterxml.uuid:java-uuid-generator:5.1.0")
    api("org.camunda.bpm:camunda-engine:$camundaVersion") {
        exclude group: 'org.camunda.bpm.model', module: 'camunda-cmmn-model'
    }

    compileOnly("io.micronaut.servlet:micronaut-servlet-engine")
    compileOnly("io.micronaut:micronaut-http-server-netty")
    compileOnly("io.micronaut.servlet:micronaut-http-server-jetty")
    compileOnly("io.micronaut.servlet:micronaut-http-server-tomcat")
    compileOnly("io.micronaut.servlet:micronaut-http-server-undertow")

    compileOnly("org.eclipse.jetty:jetty-util:$jettyVersion")
    compileOnly("org.apache.tomcat.embed:tomcat-embed-core:$tomcatVersion")
    compileOnly("io.undertow:undertow-core:$undertowVersion")

    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest("io.micronaut.data:micronaut-data-processor")
    kapt("io.micronaut:micronaut-inject-java:$micronautVersion")

    // Integration of Transaction Management
    api("io.micronaut.data:micronaut-data-tx")
    api("io.micronaut.sql:micronaut-jdbc-hikari")

    // REST API + Webapps
    implementation("com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider")
    implementation("org.camunda.bpm.webapp:camunda-webapp-webjar:$camundaVersion") {
        exclude group: 'org.camunda.bpm.webapp', module: 'camunda-webapp-jakarta'
    }
    implementation("org.camunda.bpm.webapp:camunda-webapp:$camundaVersion:classes")
    implementation("org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion")
    implementation("org.glassfish.jersey.containers:jersey-container-servlet-core:$jerseyVersion")
    implementation("org.glassfish.jersey.containers:jersey-container-servlet:$jerseyVersion")

    // Dependencies for Jetty
    implementation("org.eclipse.jetty:jetty-server:$jettyVersion")
    implementation("org.eclipse.jetty:jetty-servlet:$jettyVersion")

    // Test
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testImplementation("org.assertj:assertj-core")
    testImplementation("org.mockito:mockito-core")
    testImplementation("ch.qos.logback:logback-classic")
    testRuntimeOnly("com.h2database:h2")
    testRuntimeOnly("io.micronaut:micronaut-http-server-netty")
    testRuntimeOnly("org.codehaus.groovy:groovy-all:3.0.25") // as script engine
}

java {
    sourceCompatibility = JavaVersion.toVersion('17')
    targetCompatibility = JavaVersion.toVersion('17')
    withJavadocJar()
    withSourcesJar()
}

test {
    jvmArgs '-Xmx1536m'
}

tasks {
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "17"
        }
    }
}

// based on https://docs.gradle.org/current/userguide/publishing_maven.html#sec:modifying_the_generated_pom and https://central.sonatype.org/pages/requirements.html#sufficient-metadata
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'micronaut-camunda-bpm-feature'
                description = 'Integration between Micronaut and Camunda Process Engine'
                url = 'https://github.com/camunda-community-hub/micronaut-camunda-platform-7'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'The micronaut-camunda Team'
                        organization = 'Camunda Community'
                        organizationUrl = 'https://github.com/camunda-community-hub'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/camunda-community-hub/micronaut-camunda-platform-7.git'
                    developerConnection = 'scm:git:https://github.com/camunda-community-hub/micronaut-camunda-platform-7.git'
                    url = 'https://github.com/camunda-community-hub/micronaut-camunda-platform-7'
                }
            }
        }
    }
    repositories {
        // Release deployments via OSSRH Staging API compatibility layer
        maven {
            name = "ossrh-staging-api"
            url = uri("https://ossrh-staging-api.central.sonatype.com/service/local/staging/deploy/maven2/")
            credentials {
                username = System.getenv("CENTRAL_TOKEN_USER")
                password = System.getenv("CENTRAL_TOKEN_PWD")
            }
        }
    }
}

// see https://docs.gradle.org/current/userguide/signing_plugin.html#sec:specifying_what_to_sign and https://central.sonatype.org/pages/working-with-pgp-signatures.html#generating-a-key-pair
signing {
    sign publishing.publications.mavenJava
}

configurations {
    testArtifacts
}

// Prevent error on "./gradlew publish", see also https://docs.gradle.org/7.0/userguide/publishing_setup.html#sec:suppressing_validation_errors
tasks.withType(GenerateModuleMetadata).configureEach {
    suppressedValidationErrors.add('enforced-platform')
}
